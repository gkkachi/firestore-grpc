// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.gkehub.v1beta1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/gkehub/v1beta1;gkehub";
option java_multiple_files = true;
option java_package = "com.google.cloud.gkehub.v1beta1";

// GKE Hub CRUD API for the Membership resource.
// The Membership service is currently only available in the global location.
service GkeHubMembershipService {
  option (google.api.default_host) = "gkehub.googleapis.com";
  option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

  // Lists Memberships in a given project and location.
  rpc ListMemberships(ListMembershipsRequest) returns (ListMembershipsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/{parent=projects/*/locations/*}/memberships"
    };
    option (google.api.method_signature) = "parent";
  }

  // Gets details of a single Membership.
  rpc GetMembership(GetMembershipRequest) returns (Membership) {
    option (google.api.http) = {
      get: "/v1beta1/{name=projects/*/locations/*/memberships/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Adds a new Membership.
  rpc CreateMembership(CreateMembershipRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1beta1/{parent=projects/*/locations/*}/memberships"
      body: "resource"
    };
    option (google.api.method_signature) = "parent,resource,membership_id";
    option (google.longrunning.operation_info) = {
      response_type: "Membership"
      metadata_type: "OperationMetadata"
    };
  }

  // Removes a single Membership.
  rpc DeleteMembership(DeleteMembershipRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      delete: "/v1beta1/{name=projects/*/locations/*/memberships/*}"
    };
    option (google.api.method_signature) = "name";
    option (google.longrunning.operation_info) = {
      response_type: "google.protobuf.Empty"
      metadata_type: "OperationMetadata"
    };
  }

  // Updates an existing Membership.
  rpc UpdateMembership(UpdateMembershipRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1beta1/{name=projects/*/locations/*/memberships/*}"
      body: "resource"
    };
    option (google.api.method_signature) = "name,resource,update_mask";
    option (google.longrunning.operation_info) = {
      response_type: "Membership"
      metadata_type: "OperationMetadata"
    };
  }

  // Generate the manifest for deployment of GKE connect agent.
  rpc GenerateConnectManifest(GenerateConnectManifestRequest) returns (GenerateConnectManifestResponse) {
    option (google.api.http) = {
      get: "/v1beta1/{name=projects/*/locations/*/memberships/*}:generateConnectManifest"
    };
  }

  // ValidateExclusivity validates the state of exclusivity in the cluster.
  // The validation does not depend on an existing Hub membership resource.
  rpc ValidateExclusivity(ValidateExclusivityRequest) returns (ValidateExclusivityResponse) {
    option (google.api.http) = {
      get: "/v1beta1/{parent=projects/*/locations/*}/memberships:validateExclusivity"
    };
  }

  // GenerateExclusivityManifest generates the manifests to update the
  // exclusivity artifacts in the cluster if needed.
  // Exclusivity artifacts include the membership customer resource definition
  // (CRD) and the singleton membership custom resource (CR).
  // Combined with ValidateExclusivity, exclusivity
  // artifacts guarantee that a Kubernetes cluster is only registered to
  // a single GKE Hub.
  // The membership CRD is versioned, and may require conversion when the GKE
  // Hub API server begins serving a newer version of the CRD and
  // corresponding CR. The response will be the converted CRD and CR if there
  // are any differences between the versions.
  rpc GenerateExclusivityManifest(GenerateExclusivityManifestRequest) returns (GenerateExclusivityManifestResponse) {
    option (google.api.http) = {
      get: "/v1beta1/{name=projects/*/locations/*/memberships/*}:generateExclusivityManifest"
    };
  }
}

// Membership contains information about a member cluster.
message Membership {
  option (google.api.resource) = {
    type: "gkehub.googleapis.com/Membership"
    pattern: "projects/{project}/locations/{location}/memberships/{membership}"
  };

  // Specifies the infrastructure type that the API server represented by
  // membership is running on. We use this field to determine pricing among
  // other behavior. Each GKE distribution (on-GCP, on-Prem, on-X,...)
  // will set a default while Attached Clusters
  // customers will specify the type. If left unset, UNSPECIFIED is the
  // default.
  enum InfrastructureType {
    // Default value for backward compatibility. Some Hub functionality may
    // require users to set this value if left unspecified.
    INFRASTRUCTURE_TYPE_UNSPECIFIED = 0;

    // OnPrem specifies Memberships running on infrastructure that is owned or
    // operated by customers on private infrastructure. GKE Distributions like
    // GKE-OnPrem and GKE-OnBareMetal will set this value at Membership creation
    // time by default.
    ON_PREM = 1;

    // This value indicates the membership is running on public cloud
    // infrastructure.
    MULTI_CLOUD = 2;
  }

  // Output only. The unique name of this domain resource in the format:
  // `projects/[project_id]/locations/global/memberships/[membership_id]`.
  // `membership_id` can only be set at creation time using the `membership_id`
  // field in the creation request. `membership_id` must be a valid RFC 1123
  // compliant DNS label. In particular, it must be:
  //   1. At most 63 characters in length
  //   2. It must consist of lower case alphanumeric characters or `-`
  //   3. It must start and end with an alphanumeric character
  // I.e. `membership_id` must match the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`
  // with at most 63 characters.
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Optional. GCP labels for this membership.
  map<string, string> labels = 2 [(google.api.field_behavior) = OPTIONAL];

  // Required. Description of this membership, limited to 63 characters.
  // It must match the regex: `[a-zA-Z0-9][a-zA-Z0-9_\-\.\ ]*`
  string description = 3 [(google.api.field_behavior) = REQUIRED];

  // Type of resource represented by this Membership
  oneof type {
    // Optional. Endpoint information to reach this member.
    MembershipEndpoint endpoint = 4 [(google.api.field_behavior) = OPTIONAL];
  }

  // Output only. State of the Membership resource.
  MembershipState state = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Optional. How to identify workloads from this Membership.
  // See the documentation on workload identity for more details:
  // https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
  Authority authority = 9 [(google.api.field_behavior) = OPTIONAL];

  // Output only. Timestamp for when the Membership was created.
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Timestamp for when the Membership was last updated.
  google.protobuf.Timestamp update_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Timestamp for when the Membership was deleted.
  google.protobuf.Timestamp delete_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Optional. An externally-generated and managed ID for this Membership. This ID may
  // still be modified after creation but it is not recommended to do so.
  // The ID must match the regex: `[a-zA-Z0-9][a-zA-Z0-9_\-\.]*`
  // If this Membership represents a Kubernetes cluster, this value should be
  // set to the UUID of the kube-system namespace object.
  string external_id = 10 [(google.api.field_behavior) = OPTIONAL];

  // Output only. For clusters using Connect, the timestamp of the most recent connection
  // established with Google Cloud. This time is updated every several minutes,
  // not continuously. For clusters that do not use GKE Connect, or that have
  // never connected successfully, this field will be unset.
  google.protobuf.Timestamp last_connection_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Google-generated UUID for this resource. This is unique across all
  // Membership resources. If a Membership resource is deleted and another
  // resource with the same name is created, it gets a different unique_id.
  string unique_id = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Optional. Specifies the infrastructure type that the API server represented by
  // membership is running on.
  InfrastructureType infrastructure_type = 13 [(google.api.field_behavior) = OPTIONAL];
}

// MembershipEndpoint contains the information to reach a member.
message MembershipEndpoint {
  // Optional. If this Membership is a Kubernetes API server hosted on GKE, this field
  // will be populated and contain GKE-specific information.
  GkeCluster gke_cluster = 4 [(google.api.field_behavior) = OPTIONAL];

  // Output only. For Memberships that point to Kubernetes Endpoints, this field provides
  // useful metadata.
  KubernetesMetadata kubernetes_metadata = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Optional. A correctly registered cluster should have the Kubernetes resources
  // applied to the clusters and settle at steady states. These resources are
  // needed in order to:
  // * Ensure that the cluster is exclusively registered to one and only one Hub
  //   Membership.
  // * Propagate Workload Pool Information available in the Membership Authority
  //   field.
  // * Ensure proper initial configuration of default Hub Features.
  KubernetesResource kubernetes_resource = 6 [(google.api.field_behavior) = OPTIONAL];
}

// KubernetesResource contains the YAML manifests and configs for Kubernetes
// resources of the Membership in the cluster.
// Upon CreateMembership:
//   - The caller should provide membership_cr_manifest if a Membership CR
//     exists in the cluster.
//   - The caller should provide connect_version if they wish to also install
//     the Connect agent.
//   - The caller should then apply resources from the successful
//     GetMembership request.
// Upon UpdateMembership:
//   - The caller should provide membership_cr_manifest if a Membership CR
//     exists in the cluster.
//   - The caller should re-apply the resources from the returned Membership.
message KubernetesResource {
  // Input only. The YAML representation of the Membership CR if already exists in the
  // cluster. Leave empty if no Membership CR exists.
  // The CR manifest will be used to validate that the cluster has not been
  // registered with another Membership. For GKE clusters, the input from the
  // caller will be ignored as Hub API server will directly fetch the
  // Membership CR from the cluster.
  string membership_cr_manifest = 1 [(google.api.field_behavior) = INPUT_ONLY];

  // Output only. The additional Kubernetes resources that need to be applied to the cluster
  // after the membership creation and every update.
  // This field is only populated in the Membership returned after the
  // long-running operation of Create/UpdateMembership finished, but not in
  // standalone Get/ListMembership requests.
  // To get the resource manifest after the initial registration, the caller
  // could make an UpdateMembership call with an empty field mask.
  repeated ResourceManifest membership_resources = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The Kubernetes resources for installing GKE Connect agent.
  // This field is only populated in the Membership returned after the
  // long-running operation of Create/UpdateMembership finished, but not in
  // standalone Get/ListMembership requests.
  // To get the resource manifest after the initial registration, the caller
  // could make an UpdateMembership call with an empty field mask.
  repeated ResourceManifest connect_resources = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Optional. The options to generate Kubernetes resources other than the default
  // value supplied by the Hub API.
  // Empty or unset fields will use the default value.
  ResourceOptions resource_options = 4 [(google.api.field_behavior) = OPTIONAL];
}

// ResourceOptions represents the supported options for generating the
// Kubernetes resources.
message ResourceOptions {
  // Optional. The connect version to generate for connect_resources. If unset, default
  // to the latest GKE Connect version.
  // If set to a specific Connect version, the Connect resources of the
  // version will be generated. If the version does not exist or is already
  // out of support window, an INVALID_ARGUMENT error will be returned.
  string connect_version = 1 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Use apiextensions/v1beta1 instead of apiextensions/v1 for
  // CustomResourceDefinition resource.
  // This option should be set for clusters with Kubernetes apiserver version
  // <1.16.
  bool v1beta1_crd = 2 [(google.api.field_behavior) = OPTIONAL];
}

// ResourceManifest represents a Kubernetes resource to be applied to
// the cluster.
message ResourceManifest {
  // YAML manifest of the resource.
  string manifest = 1;

  // Specifies whether the resource provided in the manifest is cluster_scoped.
  // If set to false, the assumption is that it is namespace scoped.
  // This field is used for default REST mapper when applying the resource
  // to a cluster.
  bool cluster_scoped = 2;
}

// GkeCluster represents a k8s cluster on GKE.
message GkeCluster {
  // Immutable. Self-link of the GCP resource for the GKE cluster.
  // For example:
  // //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
  // Using "zones" instead of "locations" is also valid.
  // It can be at the most 1000 characters in length.
  string resource_link = 1 [(google.api.field_behavior) = IMMUTABLE];
}

// KubernetesMetadata provides informational metadata for Memberships
// that are created from Kubernetes Endpoints (currently, these are equivalent
// to Kubernetes clusters).
message KubernetesMetadata {
  // Output only. Kubernetes API server version string as reported by '/version'.
  string kubernetes_api_server_version = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Node providerID as reported by the first node in the list of nodes on
  // the Kubernetes endpoint. It should be noted that some Kubernetes platforms
  // (like GKE-on-GCP) support zero-node clusters. For these platforms, the
  // node_count will be zero and the node_provider_id will be empty.
  string node_provider_id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Node count as reported by Kubernetes nodes resources.
  int32 node_count = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. vCPU count as reported by Kubernetes nodes resources.
  int32 vcpu_count = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The total memory capacity as reported by the sum of all Kubernetes nodes
  // resources, defined in MB.
  int32 memory_mb = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The time at which these details were last updated. This update_time is
  // different from the Membership-level update_time since EndpointDetails are
  // updated internally for API consumers.
  google.protobuf.Timestamp update_time = 100 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Authority encodes how Google will recognize identities from this Membership.
// A workload with a token from this oidc_issuer can call the IAM credentials
// API for the provided identity_namespace and identity_provider; the workload
// will receive a Google OAuth token that it can use for further API calls.
// See the workload identity documentation for more details:
// https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
message Authority {
  // Optional. A JWT issuer URI.
  // If set, then Google will attempt OIDC discovery on this URI, and allow
  // valid OIDC tokens from this issuer to authenticate within the below
  // identity namespace.
  //
  // This can be updated from a non-empty to empty value and vice-versa.
  // But cannot be changed from one non-empty value to another.
  // Setting to empty will disable Workload Identity. issuer should be a valid
  // URL of length < 2000 that can be parsed, and must start with https://.
  string issuer = 1 [(google.api.field_behavior) = OPTIONAL];

  // Output only. The name of the workload identity pool in which the above issuer will be
  // recognized. There is a single Workload Identity Pool per Hub that is shared
  // between all Memberships that belong to this Hub. For a Hub hosted in
  // {PROJECT_ID}, the workload pool format is {PROJECT_ID}.hub.id.goog,
  // although this is subject to change in newer versions of this API.
  string workload_identity_pool = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. An identity provider that reflects this issuer in the workload identity
  // pool.
  string identity_provider = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// State of the Membership resource.
message MembershipState {
  // Possible states of a Membership resources.
  enum Code {
    // Not set.
    CODE_UNSPECIFIED = 0;

    // CREATING indicates the cluster is being registered.
    CREATING = 1;

    // READY indicates the cluster is registered.
    READY = 2;

    // DELETING indicates that the cluster is being unregistered.
    DELETING = 3;

    // UPDATING indicates the Membership is being updated.
    UPDATING = 4;

    // SERVICE_UPDATING indicates the Membership is being updated by
    // the Hub Service.
    SERVICE_UPDATING = 5;
  }

  // Output only. Code indicating the state of the Membership resource.
  Code code = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Human readable description of the issue.
  // This field is deprecated, and is never set by the Hub Service.
  string description = 2 [deprecated = true];

  // The last update time of this state by the controllers
  // This field is deprecated, and is never set by the Hub Service.
  google.protobuf.Timestamp update_time = 3 [deprecated = true];
}

// Request message for `GkeHubMembershipService.ListMemberships` method.
message ListMembershipsRequest {
  // Required. The parent in whose context the memberships are listed. The parent value
  // is in the format: `projects/[project_id]/locations/global`.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional. When requesting a 'page' of resources, `page_size` specifies number of
  // resources to return. If unspecified or set to 0, all resources will
  // be returned.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Token returned by previous call to `ListMemberships` which
  // specifies the position in the list from where to continue listing the
  // resources.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Lists the Memberships that match the filter expression. A filter expression
  // filters the resources listed in the response. The expression must be of
  // the form `<field> <operator> <value>` where operators: `<`, `>`, `<=`,
  // `>=`,
  // `!=`, `=`, `:` are supported (colon `:` represents a HAS operator which is
  // roughly synonymous with equality). <field> can refer to a proto or JSON
  // field, or a synthetic field. Field names can be camelCase or snake_case.
  //
  // Examples:
  // - Filter by name:
  //   name = "projects/foo-proj/locations/global/membership/bar
  //
  // - Filter by labels:
  //   - Resources that have a key called `foo`
  //     labels.foo:*
  //   - Resources that have a key called `foo` whose value is `bar`
  //     labels.foo = bar
  //
  //  - Filter by state:
  //    - Members in CREATING state.
  //      state = CREATING
  string filter = 4 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Field to use to sort the list.
  string order_by = 5 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for the `GkeHubMembershipService.ListMemberships` method.
message ListMembershipsResponse {
  // The list of Memberships contained within the parent.
  repeated Membership resources = 1;

  // A token to request the next page of resources from the
  // `ListMemberships` method. The value of an empty string means that
  // there are no more resources to return.
  string next_page_token = 2;

  // List of locations that could not be reached while fetching this list.
  repeated string unreachable = 3;
}

// Request message for `GkeHubMembershipService.GetMembership` method.
message GetMembershipRequest {
  // Required. The Membership resource name in the format:
  // `projects/[project_id]/locations/global/memberships/[membership_id]`
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for the `GkeHubMembershipService.CreateMembership` method.
message CreateMembershipRequest {
  // Required. The parent in whose context the membership is created. The parent value is
  // in the format: `projects/[project_id]/locations/global`.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. Client chosen ID for the membership. The ID must be a valid RFC 1123
  // compliant DNS label. In particular, the ID must be:
  //   1. At most 63 characters in length
  //   2. It must consist of lower case alphanumeric characters or `-`
  //   3. It must start and end with an alphanumeric character
  // I.e. ID must match the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?` with at most
  // 63 characters.
  string membership_id = 2 [(google.api.field_behavior) = REQUIRED];

  // Required. The resource to add.
  Membership resource = 3 [(google.api.field_behavior) = REQUIRED];
}

// Request message for `GkeHubMembershipService.DeleteMembership` method.
message DeleteMembershipRequest {
  // Required. The membership resource name in the format:
  // `projects/[project_id]/locations/global/memberships/[membership_id]`
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for `GkeHubMembershipService.UpdateMembership` method.
message UpdateMembershipRequest {
  // Required. The membership resource name in the format:
  // `projects/[project_id]/locations/global/memberships/[membership_id]`
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. Mask of fields to update. At least one field path must be specified in this
  // mask.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];

  // Required. Only fields specified in update_mask are updated.
  // If you specify a field in the update_mask but don't specify its value here
  // that field will be deleted.
  // If you are updating a map field, set the value of a key to null or empty
  // string to delete the key from the map. It's not possible to update a key's
  // value to the empty string.
  Membership resource = 3 [(google.api.field_behavior) = REQUIRED];
}

// Request message for `GkeHubMembershipService.GenerateConnectManifest`
// method.
// Bes ure to follow the practice in go/gkeconnect_agent_manifest before
// making changes to the proto.
message GenerateConnectManifestRequest {
  // Required. The membership resource the connect agent is associated with.
  // `projects/[project_id]/locations/global/memberships/[membership_id]`.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional. The connect agent to generate manifest for.
  ConnectAgent connect_agent = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. The version to use for connect agent.
  // If empty, the current default version will be used.
  string version = 3 [(google.api.field_behavior) = OPTIONAL];

  // Optional. If true, generate the resources for upgrade only. Some resources
  // (e.g. secrets) generated for installation will be excluded.
  bool is_upgrade = 4 [(google.api.field_behavior) = OPTIONAL];

  // Optional. The registry to fetch connect agent image; default to
  // gcr.io/gkeconnect.
  string registry = 5 [(google.api.field_behavior) = OPTIONAL];

  // Optional. The image pull secret content for the registry, if not public.
  bytes image_pull_secret_content = 6 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for `GkeHubService.GenerateConnectManifest`
// method.
message GenerateConnectManifestResponse {
  // The ordered list of Kubernetes resources that need to be applied to the
  // cluster for GKE Connect agent installation/upgrade.
  repeated ConnectAgentResource manifest = 1;
}

// ConnectAgentResource represents a Kubernetes resource manifest for connect
// agent deployment.
message ConnectAgentResource {
  // Kubernetes type of the resource.
  TypeMeta type = 1;

  // YAML manifest of the resource.
  string manifest = 2;
}

// TypeMeta is the type information needed for content unmarshalling of the
// Kubernetes resources in the manifest.
message TypeMeta {
  // Kind of the resource (e.g. Deployment).
  string kind = 1;

  // APIVersion of the resource (e.g. v1).
  string api_version = 2;
}

// The information required from end users to use GKE Connect.
message ConnectAgent {
  // Optional. Deprecated. Do not set.
  string name = 1 [(google.api.field_behavior) = OPTIONAL];

  // Optional. URI of the proxy to reach gkeconnect.googleapis.com.
  // The format must be in the form http(s)://{proxy_address},
  // depends on HTTP/HTTPS protocol supported by the proxy. This will direct
  // connect agent's outbound traffic through a HTTP(S) proxy.
  bytes proxy = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Namespace for GKE Connect agent resources. If empty, uses 'gke-connect'.
  string namespace = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The request to validate the existing state of the membership CR in the
// cluster.
message ValidateExclusivityRequest {
  // Required. The desired parent collection of the membership to be created in the
  // format:
  // `projects/[project_id]/locations/global`.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional. The YAML of the membership CR in the cluster. Empty if the membership
  // CR does not exist.
  string cr_manifest = 2 [(google.api.field_behavior) = OPTIONAL];

  // Required. The membership name under the "name" that could be created if the
  // validation succeed. The method only does validation in anticipation
  // of a CreateMembership call.
  string intended_membership = 3 [(google.api.field_behavior) = REQUIRED];
}

// The response of exclusivity artifacts validation result status.
message ValidateExclusivityResponse {
  // The status.Code contains the validation result. As such,
  // * OK means that exclusivity may be obtained if the manifest produced by
  // GenerateExclusivityManifest can successfully be applied.
  // * ALREADY_EXISTS means that the Membership CRD is already owned by another
  // Hub. See status.message for more information when this occurs.
  google.rpc.Status status = 1;
}

// The request to generate the manifests for exclusivity artifacts.
message GenerateExclusivityManifestRequest {
  // Required. The membership the cluster corresponds to in the format:
  // `projects/[project_id]/locations/global/memberships/[membership_id]`.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional. The YAML manifest of the membership CRD retrieved by
  // `kubectl get customresourcedefinitions membership`.
  // Leave empty if the resource does not exist.
  string crd_manifest = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. The YAML manifest of the membership CR retrieved by
  // `kubectl get memberships membership`.
  // Leave empty if the resource does not exist.
  string cr_manifest = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The response of the exclusivity artifacts manifests for the client to apply.
message GenerateExclusivityManifestResponse {
  // The YAML manifest of the membership CRD to apply if a newer version of the
  // CRD is available. Empty if no update needs to be applied.
  string crd_manifest = 1;

  // The YAML manifest of the membership CR to apply if a new version of the
  // CR is available. Empty if no update needs to be applied.
  string cr_manifest = 2;
}

// Represents the metadata of the long-running operation.
message OperationMetadata {
  // Output only. The time the operation was created.
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The time the operation finished running.
  google.protobuf.Timestamp end_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Server-defined resource path for the target of the operation.
  string target = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Name of the verb executed by the operation.
  string verb = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Human-readable status of the operation, if any.
  string status_detail = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Identifies whether the user has requested cancellation
  // of the operation. Operations that have successfully been cancelled
  // have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
  // corresponding to `Code.CANCELLED`.
  bool cancel_requested = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. API version used to start the operation.
  string api_version = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
}
