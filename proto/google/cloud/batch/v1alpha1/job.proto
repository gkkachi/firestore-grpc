// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.batch.v1alpha1;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/cloud/batch/v1alpha1/task.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/batch/v1alpha1;batch";
option java_multiple_files = true;
option java_outer_classname = "JobProto";
option java_package = "com.google.cloud.batch.v1alpha1";
option objc_class_prefix = "GCB";

// The Cloud Batch Job description.
message Job {
  option (google.api.resource) = {
    type: "batch.googleapis.com/Job"
    pattern: "projects/{project}/locations/{location}/jobs/{job}"
  };

  // The order that TaskGroups are scheduled relative to each other.
  //
  // [NotImplemented]
  enum SchedulingPolicy {
    // Unspecified.
    SCHEDULING_POLICY_UNSPECIFIED = 0;

    // Run all TaskGroups as soon as possible.
    AS_SOON_AS_POSSIBLE = 1;
  }

  // Job name.
  // It must have the format of "projects/*/locations/*/jobs/*".
  // For example: "projects/123456/locations/us-west1/jobs/job01".
  string name = 1;

  // Output only. A system generated unique ID (in UUID4 format) for the Job.
  string uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Priority of the Job.
  // The valid value range is [0, 100).
  // A job with higher priority value will be scheduled to run earlier.
  int64 priority = 3;

  // Required. TaskGroups in the Job. Only one TaskGroup is supported now.
  repeated TaskGroup task_groups = 4 [(google.api.field_behavior) = REQUIRED];

  // Scheduling policy for TaskGroups in the job.
  SchedulingPolicy scheduling_policy = 5;

  // At least one of the dependencies must be satisfied before the Job is
  // scheduled to run.
  // Only one JobDependency is supported now.
  // [NotImplemented]
  repeated JobDependency dependencies = 6;

  // Compute resource allocation for all TaskGroups in the Job.
  AllocationPolicy allocation_policy = 7;

  // Labels for the Job. Labels could be user provided or system generated.
  // For example,
  // "labels": {
  //    "department": "finance",
  //    "environment": "test"
  //  }
  // You can assign up to 64 labels.  [Google Compute Engine label
  // restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
  // apply.
  // Label names that start with "goog-" or "google-" are reserved.
  map<string, string> labels = 8;

  // Output only. Job status. It is read only for users.
  JobStatus status = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Job notification.
  JobNotification notification = 10;

  // When the Job was created.
  google.protobuf.Timestamp create_time = 11;

  // The last time the Job was updated.
  google.protobuf.Timestamp update_time = 12;

  // Log preservation policy for the Job.
  LogsPolicy logs_policy = 13;
}

// LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be
// preserved.
message LogsPolicy {
  // The destination (if any) for logs.
  enum Destination {
    // Logs are not preserved.
    DESTINATION_UNSPECIFIED = 0;

    // Logs are streamed to Cloud Logging.
    CLOUD_LOGGING = 1;

    // Logs are saved to a path.
    PATH = 2;
  }

  // Where logs should be saved.
  Destination destination = 1;

  // The path to which logs are saved when the destination = PATH. This can be a
  // local filepath on the VM, or under the mount point of a Persistent Disk or
  // Filestore, or a Cloud Storage path.
  string logs_path = 2;
}

// JobDependency describes the state of other Jobs that the start of this Job
// depends on.
// All dependent Jobs must have been submitted in the same region.
message JobDependency {
  // Dependency type.
  enum Type {
    // Unspecified.
    TYPE_UNSPECIFIED = 0;

    // The dependent Job has succeeded.
    SUCCEEDED = 1;

    // The dependent Job has failed.
    FAILED = 2;

    // SUCCEEDED or FAILED.
    FINISHED = 3;
  }

  // Each item maps a Job name to a Type.
  // All items must be satisfied for the JobDependency to be satisfied (the AND
  // operation).
  // Once a condition for one item becomes true, it won't go back to false
  // even the dependent Job state changes again.
  map<string, Type> items = 1;
}

// Job status.
message JobStatus {
  // Valid Job states.
  enum State {
    STATE_UNSPECIFIED = 0;

    // Job is submitted into a ResourcePool and waiting
    // for resource allocation.
    QUEUED = 1;

    // Job is scheduled to run as soon as resource allocation is ready.
    // The resource allocation may happen at a later time but with a high
    // chance to succeed.
    SCHEDULED = 2;

    // Resource allocation has been successful. At least one Task in the Job is
    // RUNNING.
    RUNNING = 3;

    // All Tasks in the Job have finished successfully.
    SUCCEEDED = 4;

    // At least one Task in the Job has failed.
    FAILED = 5;

    // The Job will be deleted, but has not been deleted yet. Typically this is
    // because resources used by the Job are still being cleaned up.
    DELETION_IN_PROGRESS = 6;
  }

  // Aggregated task status for a TaskGroup.
  message TaskGroupStatus {
    // Count of task in each state in the TaskGroup.
    // The map key is task state name.
    map<string, int64> counts = 1;
  }

  // Job state
  State state = 1;

  // Job status events
  repeated StatusEvent status_events = 2;

  // Aggregated task status for each TaskGroup in the Job.
  // The map key is TaskGroup ID.
  map<string, TaskGroupStatus> task_groups = 4;

  // The duration of time the Job is in status
  // RUNNING. Once the Job completes (i.e. the Job status is either
  // SUCCEEDED/FAILED) the run duration represents the time it took the Job
  // to complete.
  google.protobuf.Duration run_duration = 5;
}

// Job notification.
message JobNotification {
  // The Cloud Pub/Sub topic where notifications like the job state changes will
  // be published. This topic should be an existing topic in the same project
  // with the job and billings will be charged to this project.
  string pubsub_topic = 1;
}

// A Job's resource allocation policy describes when, where, and how compute
// resources should be allocated for the Job.
message AllocationPolicy {
  // Be consistent with LocationPolicy in
  // //cloud/cluster/api/mixter_instances.proto.
  message LocationPolicy {
    // A list of allowed location names represented by internal URLs,
    // for example, zones/us-central1-a, regions/us-west1.
    // First location in the list should be a region.
    repeated string allowed_locations = 1;

    // A list of denied location names.
    repeated string denied_locations = 2;
  }

  // InstancePolicy describes what instances should be created for the Job.
  message InstancePolicy {
    // A list of allowed Compute Engine machine types, for example,
    // e2-standard-4. Default is empty which means allowing all.
    repeated string allowed_machine_types = 1;

    // A list of denied Compute Engine machine types.
    // Default is empty which means denying none.
    // A machine type is allowed if it matches 'allowed_machine_types' AND
    // does not match 'denied_machine_types'.
    // For example,
    //   allowed_machine_types = "e2-standard"
    //   denied_machine_types = "e2-standard-2, e2-standard-4"
    // means using all E2 standard machine types except for 'e2-standard-2' and
    // 'e2-standard-4.
    //
    // [NotImplemented]
    repeated string denied_machine_types = 2;

    // A list of allowed CPU platforms, for example,
    // "Intel Cascade Lake", "AMD Rome".
    // Default is empty which means allowing all.
    //
    // [NotImplemented]
    repeated string allowed_cpu_platforms = 3;

    // A list of denied CPU platforms.
    // Default is empty which means denying none.
    // A CPU platform is allowed if it matches 'allowed_cpu_platforms' AND
    // does not match 'denied_cpu_platforms'.
    // If a CPU platform belongs to both lists, it will be denied.
    //
    // [NotImplemented]
    repeated string denied_cpu_platforms = 4;

    // A list of allowed accelerator types (GPU models), for example,
    // "nvidia-tesla-t4". Default is empty which means allowing all.
    //
    // [NotImplemented]
    repeated string allowed_accelerator_types = 5;

    // A list of denied accelerator types (GPU models).
    // Default is empty which means denying none.
    // A accelerator type is allowed if it matches 'allowed_accelerator_types'
    // AND does not match 'denied__accelerator_types'.
    //
    // [NotImplemented]
    repeated string denied_accelerator_types = 6;

    // The number of accelerators per VM instance.
    //
    // [NotImplemented]
    int64 accelerator_count = 7;
  }

  // Compute Engine VM instance provisioning model.
  enum ProvisioningModel {
    // Unspecified.
    PROVISIONING_MODEL_UNSPECIFIED = 0;

    // Standard VM.
    STANDARD = 1;

    // SPOT VM.
    SPOT = 2;

    // Preemptible VM (PVM).
    //
    // Above SPOT VM is the preferable model for preemptible VM instances: the
    // old preemptible VM model (indicated by this field) is the older model,
    // and has been migrated to use the SPOT model as the underlying technology.
    // This old model will still be supported.
    PREEMPTIBLE = 3;
  }

  // A network interface.
  message NetworkInterface {
    // The URL of the network resource.
    string network = 1;

    // The URL of the Subnetwork resource.
    string subnetwork = 2;

    // Default is false (with an external IP address). Required if
    // no external public IP address is attached to the VM. If no external
    // public IP address, additional configuration is required to allow the VM
    // to access Google Services. See
    // https://cloud.google.com/vpc/docs/configure-private-google-access and
    // https://cloud.google.com/nat/docs/gce-example#create-nat for more
    // information.
    bool no_external_ip_address = 3;
  }

  // NetworkPolicy describes network configurations for instances created
  // for the job.
  message NetworkPolicy {
    // Network configurations.
    repeated NetworkInterface network_interfaces = 1;
  }

  // Location where compute resources should be allocated for the Job.
  LocationPolicy location = 1;

  // Create only instances allowed by this policy.
  InstancePolicy instance = 2;

  // Create instances from the first instance template - MVP
  // Use 'gcloud compute instance-templates list` to see available templates
  // in the project If specified, it overrides the 'instance' field.
  repeated string instance_templates = 3;

  // Create only instances in the listed provisiong models.
  // Default to allow all.
  //
  // Currently only the first model of the provisioning_models list will be
  // considered; specifying additional models (e.g., 2nd, 3rd, etc.) is a no-op.
  repeated ProvisioningModel provisioning_models = 4;

  // Email of the service account that VMs will run as.
  string service_account = 5;

  // Labels applied to all VM instances and other resources
  // created by AllocationPolicy.
  // Labels could be user provided or system generated.
  // You can assign up to 64 labels. [Google Compute Engine label
  // restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
  // apply.
  // Label names that start with "goog-" or "google-" are reserved.
  map<string, string> labels = 6;

  // The network policy.
  NetworkPolicy network = 7;
}

// A TaskGroup contains one or multiple Tasks that share the same
// Runnable but with different runtime parameters.
message TaskGroup {
  option (google.api.resource) = {
    type: "batch.googleapis.com/TaskGroup"
    pattern: "projects/{project}/locations/{location}/jobs/{job}/taskGroups/{task_group}"
  };

  // How Tasks in the TaskGroup should be scheduled relative to each other.
  enum SchedulingPolicy {
    // Unspecified.
    SCHEDULING_POLICY_UNSPECIFIED = 0;

    // Run Tasks as soon as resources are available.
    AS_SOON_AS_POSSIBLE = 1;
  }

  // TaskGroup.Environment is a workaround for proto3 not supporting
  // repeated map<string, string>.
  message Environment {
    // An map of environment variable names to values.
    // The map may contain at most 10 key/value pairs with keys length up to
    // 64 characters and values up to 4 KB.
    map<string, string> variables = 1;
  }

  // Output only. TaskGroup name.
  // The system generates this field based on parent Job name.
  // For example:
  // "projects/123456/locations/us-west1/jobs/job01/taskGroups/default-group".
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Required. Tasks in the group share the same task spec.
  TaskSpec task_spec = 3 [(google.api.field_behavior) = REQUIRED];

  // Number of Tasks in the TaskGroup.
  // default is 1
  int64 task_count = 4;

  // Max number of tasks that can run in parallel.
  // Default to min(task_count, 1000).
  int64 parallelism = 5;

  // Scheduling policy for Tasks in the TaskGroup.
  SchedulingPolicy scheduling_policy = 6;

  // Compute resource allocation for the TaskGroup.
  // If specified, it overrides resources in Job.
  AllocationPolicy allocation_policy = 7;

  // Labels for the TaskGroup.
  // Labels could be user provided or system generated.
  // You can assign up to 64 labels.  [Google Compute Engine label
  // restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
  // apply.
  // Label names that start with "goog-" or "google-" are reserved.
  map<string, string> labels = 8;

  // An array of environment variable mappings, which are passed to Tasks with
  // matching indices. If task_environments is used then task_count should
  // not be specified in the request (and will be ignored). Task count will be
  // the length of task_environments.
  //
  // Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in
  // addition to any environment variables set in task_environments, specifying
  // the number of Tasks in the Task's parent TaskGroup, and the specific Task's
  // index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).
  //
  // task_environments supports up to 200 entries.
  repeated Environment task_environments = 9;

  // Max number of tasks that can be run on a node
  // at the same time. Default is 1.
  int64 task_count_per_node = 10;

  // When true, Batch will populate a file with a list of all VMs assigned to
  // the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path
  // of that file. Defaults to false.
  bool require_hosts_file = 11;
}
