searchState.loadedDescShard("tracing_futures", 0, "Futures compatibility for <code>tracing</code>.\nExtension trait allowing futures, streams, sinks, and …\nA future, stream, sink, or executor that has been …\nA future, stream, sink, or executor that has been …\nExtension trait allowing futures, streams, and sinks to be …\nBorrows the <code>Dispatch</code> that this type is instrumented by.\nImplementations for <code>Instrument</code>ed future executors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruments this type with the current <code>Span</code>, returning an …\nBorrows the wrapped type.\nBorrows the wrapped type.\nMutably borrows the wrapped type.\nMutably borrows the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nInstruments this type with the provided <code>Span</code>, returning an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nConsumes the <code>WithDispatch</code>, returning the wrapped type.\nBorrows the <code>Span</code> that this type is instrumented by.\nMutably borrows the <code>Span</code> that this type is instrumented by.\nAttaches the current default <code>Subscriber</code> to this type, …\nWrap a future, stream, sink or executor with the same …\nAttaches the provided <code>Subscriber</code> to this type, returning a …")