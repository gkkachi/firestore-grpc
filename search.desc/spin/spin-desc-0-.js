searchState.loadedDescShard("spin", 0, "Synchronization primitives based on spinning\nInitialization constant of <code>Once</code>.\nThis type provides MUTual EXclusion based on spinning.\nA guard to which the protected data can be accessed\nA synchronization primitive which can be used to run a …\nA reader-writer lock\nA guard from which the protected data can be read\nA guard from which the protected data can be read, and can …\nA guard to which the protected data can be written\nPerforms an initialization routine once and only once. The …\nDowngrades the writable lock guard to a readable, shared …\nDowngrades the upgradeable lock guard to a readable, …\nThe dropping of the MutexGuard will release the lock it …\nForce decrement the reader count.\nForce unlock the spinlock.\nForce unlock exclusive write access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this mutex, returning the underlying data.\nConsumes this <code>RwLock</code>, returning the underlying data.\nLocks the spinlock and returns a guard.\nCreates a new spinlock wrapping the supplied data.\nCreates a new spinlock wrapping the supplied data.\nCreates a new <code>Once</code> value.\nLocks this rwlock with shared read access, blocking the …\nReturns a pointer iff the <code>Once</code> was previously initialized\nTries to lock the mutex. If it is already locked, it will …\nAttempt to acquire this lock with shared read access.\nTries to upgrade an upgradeable lock guard to a writable …\nTries to obtain an upgradeable lock guard.\nAttempt to lock this rwlock with exclusive write access.\nUpgrades an upgradeable lock guard to a writable lock …\nObtain a readable lock guard that can later be upgraded to …\nLike try, but will spin if the <code>Once</code> is in the process of …\nLock this rwlock with exclusive write access, blocking the …")