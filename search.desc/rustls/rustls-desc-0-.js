searchState.loadedDescShard("rustls", 0, "Rustls - a modern TLS library\nAES with 128-bit keys in Galois counter mode.\nAES with 256-bit keys in Galois counter mode.\nA list of all the cipher suites supported by rustls.\nWe received a fatal alert.  This means the peer is unhappy.\nA <code>ClientCertVerifier</code> that will allow both anonymous and …\nA <code>ClientCertVerifier</code> that will ensure that every client …\nBulk symmetric encryption scheme used by a cipher suite.\nChacha20 for confidentiality with poly1305 for …\nThis type contains a single certificate by value.\nThe <code>CipherSuite</code> TLS protocol enum.  Values in this enum …\nCommon configuration for (typically) all connections made …\nA struct representing the received Client Hello\nThis represents a single TLS client session.\nAn implementor of <code>StoresClientSessions</code> that stores …\nThe peer sent us a syntactically incorrect TLS message.\nThe peer sent us a TLS message with invalid contents.\nWe couldn’t decrypt a message.  This is invariably fatal.\nWe failed to figure out what time it currently is.\nA catch-all error for unlikely errors.\nThis function doesn’t work until the TLS handshake is …\nWe received a TLS handshake message that isn’t valid …\nWe received a TLS message that isn’t valid right now. …\nThe presented SCT(s) were invalid.\nThis trait represents the ability to do something useful …\n<code>KeyLog</code> implementation that opens a file whose name is …\nAn incoming connection did not support any known …\nThe peer didn’t give us any certificates.\nTurns off client authentication.\nAn implementor of <code>StoresClientSessions</code> which does nothing.\nKeyLog that does exactly nothing.\nSomething which never stores sessions.\nThis is like a <code>webpki::TrustAnchor</code>, except it owns rather …\nThe peer doesn’t support a protocol version/feature we …\nThe peer deviated from the standard TLS protocol. The …\nThe peer sent an oversized record/fragment.\nThis type contains a private key by value.\nA trait for the ability to encrypt and decrypt tickets.\nThe <code>ProtocolVersion</code> TLS protocol enum.  Values in this …\nA trait for the ability to choose a certificate chain and …\nHow to choose a certificate chain and signing key for use …\nSomething that resolves do different cert chains/keys based\nA container for root certificates able to provide a …\nCommon configuration for a set of server sessions.\nThis represents a single TLS server session.\nAn implementor of <code>StoresServerSessions</code> that stores …\nGeneralises <code>ClientSession</code> and <code>ServerSession</code>\nThe <code>SignatureScheme</code> TLS protocol enum.  Values in this …\nA trait for the ability to store client session data. The …\nA trait for the ability to store server session data.\nThis type implements <code>io::Read</code> and <code>io::Write</code>, encapsulating …\nThis type implements <code>io::Read</code> and <code>io::Write</code>, encapsulating …\nA cipher suite supported by rustls.\nrustls reports protocol errors using this type.\nA concrete, safe ticket creation mechanism.\nThe presented certificate chain is invalid.\nStub that implements io::Write and dispatches to …\nAdd a new <code>sign::CertifiedKey</code> to be used for the given SNI …\nAdd a single DER-encoded certificate to the store.\nParse a PEM file and add all certificates found inside. …\nAdds all the given TrustAnchors <code>anchors</code>.  This does not …\nGet the alpn.\nWhich ALPN protocols we include in our client hello. If …\nProtocol names we support, most preferred first. If empty …\nHow to do bulk encryption.\nHow many bytes you may send.  Writes will become short …\nCan a session using suite self resume using suite …\nHow to choose a server cert and key.\nAll defined ciphersuites appear in this module.\nList of ciphersuites, in preference order.\nList of ciphersuites, in preference order.\nHow to decide what client auth certificate/keys to use.\nThis function uses <code>io</code> to complete any outstanding IO for …\nThis function uses <code>io</code> to complete any outstanding IO for …\nCollection of certificate transparency logs. If this …\nDecrypt <code>cipher</code>, validating its authenticity protection and …\nWe have parameters and a verified public key in <code>kx_params</code>. …\nReturns an <code>io::Write</code> implementor you can write bytes to to …\nMake a new, empty <code>RootCertStore</code>.\nWhether to send data on the first flight (“early data”…\nWhether to send the Server Name Indication (SNI) extension …\nWhether to support RFC5077 tickets.  You must provide a …\nReturns true if this implementation will encrypt/decrypt …\nEncryption key length, for the bulk algorithm.\nEncrypt and authenticate <code>plain</code>, returning the resulting …\nThis is a non-standard extension which extends the key …\nDerives key material from the agreed session secrets.\nHow long the fixed part of the ‘IV’ is.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopy a <code>webpki::TrustAnchor</code> into owned memory\nReturns the latest value for <code>key</code>.  Returns <code>None</code> if there’…\nFind a value with the given <code>key</code>.  Return it, or None if it …\nRetrieves the protocol agreed with the peer via ALPN.\nWhich hash function to use with this suite.\nReturns the lifetime in seconds of tickets produced now. …\nGet a mutable reference to the underlying socket\nRetrieves the ciphersuite agreed with the peer.\nRetrieves the certificate chain used by the peer to …\nRetrieves the protocol version agreed with the peer.\nGet a reference to the underlying socket\nRetrieves the SNI hostname, if any, used to select the …\nReturn the Subject Names for certificates in the container.\nReturn true if any certificates at all are available.\nHow to do hashing.\nIgnore the client’s ciphersuite order. Instead, choose …\nInternal classes which may be useful outside the library. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns True if the server signalled it will process early …\nReturn true if there are no certificates.\nReturns true if the session is currently perform the TLS …\nLength of key block that needs to be output by the key …\nHow to output key material for debugging.  The default …\nHow to output key material for debugging.  The default …\nHow to exchange/agree keys.\nSay how many certificates are in the container.\nLog the given <code>secret</code>.  <code>client_random</code> is provided for …\nThis is the rustls manual.\nOur MTU.  If None, we don’t limit TLS message sizes.\nOur MTU.  If None, we don’t limit TLS message sizes.\nMake a new Stream using the Session <code>sess</code> and socket-like …\nMake a new StreamOwned taking the Session <code>sess</code> and …\nConstruct a new <code>AllowAnyAuthenticatedClient</code>.\nConstruct a new <code>AllowAnyAnonymousOrAuthenticatedClient</code>.\nConstructs a <code>NoClientAuth</code> and wraps it in an <code>Arc</code>.\nMake a new ClientSessionMemoryCache.  <code>size</code> is the maximum …\nMakes a new <code>KeyLogFile</code>.  The environment variable is …\nMake a new ServerSessionMemoryCache.  <code>size</code> is the maximum …\nCreate a new and empty (ie, knows no certificates) …\nMake the recommended Ticketer.  This produces tickets with …\nMake a <code>ClientConfig</code> with a default set of ciphersuites, no …\nMake a new ClientSession.  <code>config</code> controls how we behave …\nMake a <code>ServerConfig</code> with a default set of ciphersuites, no …\nMake a new ServerSession.  <code>config</code> controls how we behave …\nProcesses any new packets read by a previous call to …\nStores a new <code>value</code> for <code>key</code>.  Returns <code>true</code> if the value was …\nStore session secrets encoded in <code>value</code> against <code>key</code>, …\nObtain plaintext data received from the peer over this TLS …\nObtain plaintext data received from the peer over this TLS …\nRead TLS content from <code>rd</code>.  This method does internal …\nApplication-controlled portion of the resumption ticket …\nExplicitly discard early data, notifying the client\nWith the server-supplied acceptable issuers in …\nChoose a certificate chain and matching key given …\nResolve the set of supported <code>SignatureScheme</code>s from the …\nCollection of root certificates.\nThe list of roots.\nQueues a close_notify fatal alert to be sent in the next …\nGet the server name indicator.\nOur session\nOur session\nHow we store session data or tickets.\nHow to store client sessions.\nSets a limit on the internal buffers used to buffer unsent …\nOverrides the default <code>ClientCertVerifier</code> with something …\nSets MTU to <code>mtu</code>.  If None, the default is used. If Some(x) …\nSets persistence layer to <code>persist</code>.\nSets the session persistence layer to <code>persist</code>.\nSet the ALPN protocol list to the given protocol names. …\nSet the ALPN protocol list to the given protocol names. …\nSet the resumption data to embed in future resumption …\nSets a single certificate chain and matching private key.  …\nSets a single certificate chain, matching private key and …\nSets a single client authentication certificate and …\nMessage signing interfaces and implementations.\nHow to sign messages for authentication.\nGet the compatible signature schemes.\nThe underlying transport, like a socket\nThe underlying transport, like a socket\nStart the KX process with the given group.  This generates …\nThe TLS enumeration naming this cipher suite.\nFind a value with the given <code>key</code>.  Return it and delete it; …\nHow to produce tickets.\nGet a <code>webpki::TrustAnchor</code> by borrowing the owned elements.\nReturn true if this suite is usable for a key only …\nReturn true if this suite is usable for TLS <code>version</code>.\nSupported versions, in no particular order.  The default …\nSupported protocol versions, in no particular order. The …\nReturns true if the caller should call <code>read_tls</code> as soon as …\nReturns true if the caller should call <code>write_tls</code> as soon …\nIndicates whether the secret with label <code>label</code> will be …\nIndicates whether the secret with label <code>label</code> will be …\nMake a <code>ClientConfig</code> with a custom set of ciphersuites, no …\nMake a <code>ServerConfig</code> with a custom set of ciphersuites, no …\nSend the plaintext <code>buf</code> to the peer, encrypting and …\nSend the plaintext <code>buf</code> to the peer, encrypting and …\nWrites TLS messages to <code>wr</code>.\nWrites TLS messages to <code>wr</code>.\nWrites TLS messages to <code>wr</code>.\nWhich types we expected\nWhich handshake type we expected\nWhat type we received\nWhat handshake type we received\nThe TLS1.3 ciphersuite TLS_AES_128_GCM_SHA256\nThe TLS1.3 ciphersuite TLS_AES_256_GCM_SHA384\nThe TLS1.3 ciphersuite TLS_CHACHA20_POLY1305_SHA256\nThe TLS1.2 ciphersuite …\nThe TLS1.2 ciphersuite …\nThe TLS1.2 ciphersuite …\nThe TLS1.2 ciphersuite …\nThe TLS1.2 ciphersuite …\nThe TLS1.2 ciphersuite …\nLow-level TLS message parsing and encoding functions.\nFunctions for parsing PEM files containing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn externally length’d payload\nAn arbitrary, unknown-content, u16-length-prefixed payload\nAn arbitrary, unknown-content, u24-length-prefixed payload\nAn arbitrary, unknown-content, u8-length-prefixed payload\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThings we can encode and read from a Reader.\nRead from a byte slice.\nEncode yourself by appending onto <code>bytes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience function to get the results of <code>encode()</code>.\nConvenience function to get the results of <code>encode()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecode yourself by fiddling with the <code>Reader</code>. Return Some …\nRead one of these from the front of <code>bytes</code> and return it.\nRead one of these from the front of <code>bytes</code> and return it.\nThis deframer works to reconstruct TLS messages from …\nSet to true if the peer is not talking TLS, but some other …\nCompleted frames for output.\nReturns the argument unchanged.\nReturns true if we have messages for the caller to …\nCalls <code>U::from(self)</code>.\nRead some bytes from <code>rd</code>, and add them to our internal …\nThe <code>AlertDescription</code> TLS protocol enum.  Values in this …\nThe <code>AlertLevel</code> TLS protocol enum.  Values in this enum are …\nThe <code>CertificateStatusType</code> TLS protocol enum.  Values in …\nThe <code>CipherSuite</code> TLS protocol enum.  Values in this enum …\nThe <code>ClientCertificateType</code> TLS protocol enum.  Values in …\nThe <code>Compression</code> TLS protocol enum.  Values in this enum …\nThe <code>ContentType</code> TLS protocol enum.  Values in this enum …\nThe <code>ECCurveType</code> TLS protocol enum.  Values in this enum …\nThe <code>ECPointFormat</code> TLS protocol enum.  Values in this enum …\nThe <code>ExtensionType</code> TLS protocol enum.  Values in this enum …\nThe <code>HandshakeType</code> TLS protocol enum.  Values in this enum …\nThe <code>HashAlgorithm</code> TLS protocol enum.  Values in this enum …\nThe <code>HeartbeatMessageType</code> TLS protocol enum.  Values in …\nThe <code>HeartbeatMode</code> TLS protocol enum.  Values in this enum …\nThe <code>KeyUpdateRequest</code> TLS protocol enum.  Values in this …\nThe <code>NamedCurve</code> TLS protocol enum.  Values in this enum are …\nThe <code>NamedGroup</code> TLS protocol enum.  Values in this enum are …\nThe <code>PSKKeyExchangeMode</code> TLS protocol enum.  Values in this …\nThe <code>ProtocolVersion</code> TLS protocol enum.  Values in this …\nThe <code>ServerNameType</code> TLS protocol enum.  Values in this enum …\nThe <code>SignatureAlgorithm</code> TLS protocol enum.  Values in this …\nThe <code>SignatureScheme</code> TLS protocol enum.  Values in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the Message <code>msg</code> and re-fragment it into new messages …\nEnqueue borrowed fragments of (version, typ, payload) which\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a new fragmenter.  <code>max_fragment_len</code> is the maximum …\nOnly supports OCSP\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if there is more than one extension of a given\nReturns true if there is more than one extension of a given\nReturns true if there is more than one extension of a given\nReturns true if there is more than one extension of a given\nRFC6066: “The ServerNameList MUST NOT contain more than …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a basic SNI ServerNameRequest quoting <code>hostname</code>.\nMake a new one with one entry.\nThis works to reconstruct TLS handshake messages from …\nCompleted handshake frames for output.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDo we have any buffered data?\nMake a new HandshakeJoiner.\nTake the message, and join/split it as needed. Return the …\nDo we want to process this message?\nA TLS frame, named TLSPlaintext in the standard.\nMaximum on-wire message size.\nA TLS frame, named TLSPlaintext in the standard. This type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLike Message::read(), but allows the important distinction …\nKeys for session resumption and tickets. Matching value is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract all the certificates from rd, and return a vec of …\nExtract all PKCS8-encoded private keys from rd, and return …\nExtract all RSA private keys from rd, and return a vec of …\nThis section discusses vulnerabilities in other TLS …\nThis section discusses vulnerabilities and design errors …\nThis section collects together goal-oriented documentation.\nThis section documents rustls itself: what protocol …\nA packaged-together certificate chain, matching <code>SigningKey</code> …\nA <code>SigningKey</code> for RSA-PKCS1 or RSA-PSS\nA thing that can sign a message.\nAn abstract signing key.\nWhat kind of key we have.\nParse <code>der</code> as any ECDSA key type, returning the first which …\nParse <code>der</code> as any EdDSA key type, returning the first which …\nParse <code>der</code> as any supported key encoding/type, returning …\nThe certificate chain.\nChoose a <code>SignatureScheme</code> from those offered.\nCheck the certificate chain for validity:\nThe end-entity certificate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReveals which scheme will be used when you call <code>sign()</code>.\nReturn true if there’s an OCSP response.\nReturn true if there’s an SCT list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe certified key.\nMake a new <code>RSASigningKey</code> from a DER encoding, in either …\nMake a new CertifiedKey, with the given chain and key.\nAn optional OCSP response from the certificate issuer, …\nAn optional collection of SCTs from CT logs, proving the …\nSigns <code>message</code> using the selected scheme.\nThe set of schemes we support for signatures and that are …\nSteal ownership of the certificate chain.\nSteal ownership of the OCSP response.\nSteal ownership of the SCT list.")